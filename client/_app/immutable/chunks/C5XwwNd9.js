import{c,j as a,r as S,q as O,h}from"./BRrMSDP5.js";import{b as p,f as b}from"./CHRSknKA.js";import{g as R}from"./DlIBaGjY.js";import{b as j}from"./bY-Ac27V.js";import{g as P,a as _}from"./fGQBOZLe.js";async function U(){var n;const e=await c(`${a.Search}/${R(S).hpdsOpen}`,{query:"\\_studies_consents\\"});return Object.keys((n=e==null?void 0:e.results)==null?void 0:n.phenotypes)}const g="Â±";function F(e){let t,n;if(String(e).startsWith("<"))n=3,t=0;else{const[r,u]=String(e).split(g);t=parseInt(r.replaceAll(",",""))||0,n=parseInt(u??"")||0}return{value:t,suffix:n}}function T(e){return e.flatMap(t=>typeof t=="object"?Object.values(t):t)}function v(e,t=!0){const n=T(e);if(n.length===0)return t?"0":0;if(n.length===1&&n[0].toString().startsWith("<"))return n[0];const r=n.map(F),u=r.reduce((s,{value:f})=>f>0?s+f:s,0),o=Math.max(...r.map(({suffix:s})=>s),0);return t?o>0?`${u.toLocaleString()}${g}${o}`:u.toLocaleString():u}function i(e){return e!=null&&e.errorType?Promise.reject("api error"):e}const B={list:e=>Object.values(e.result),rejected:e=>e.status==="rejected",fullfiled:e=>e.status==="fulfilled",valueOrZero:e=>e.status==="fulfilled"?e.value:0};function q(e){var n,r,u;return((n=p)!=null&&n.statFields?Object.keys((r=p)==null?void 0:r.statFields):[]).includes(e)?(u=p)==null?void 0:u.statFields[e]:[]}function C(e=!1){const t={facets:[],search:"",consents:[]};return e?t:j(t)}function Q(e){return function({isOpenAccess:t}){const n=C(t);return c(a.Facets,n).then(r=>{const u=r.find(s=>s.name===e);return u?t?u.facets.length:u.facets.filter(s=>s.count>0).length:0}).then(i)}}function k({isOpenAccess:e}){const t=C(e);return c(`${a.Concepts}?page_number=1&page_size=1`,t).then(n=>n.totalElements||Promise.reject("total not found"))}function w({request:e}){return c(a.QuerySync,e).then(i)}function x({stat:e}){return Promise.resolve((e==null?void 0:e.value)||0)}async function L(e){const t={...e.request};t.query.expectedResultType="CROSS_COUNT";const n=await U();return t.query.setCrossCountFields(n),c(a.QuerySync,t).then(i).then(r=>v([r["\\_studies_consents\\"]||0]))}function M(e){const t={...e.request};return t.query.expectedResultType="COUNT",c(a.QuerySync,t).then(i)}function N(e){return e.isOpenAccess?L(e):M(e)}function y(e,t){return function(n){const r=q(e).map(o=>o.conceptPath);if(r.length===0)return Promise.reject(`${e} feilds were not configured`);const u={...n.request};return u.query.expectedResultType=t,u.query.setCrossCountFields(r),c(a.QuerySync,u).then(i)}}function $(e){return function(t){const n=q("query:consent");if(n.length===0)return Promise.reject("consent feilds were not configured");const r=n.reduce((o,s)=>({...o,[s.conceptPath]:[...o[s.conceptPath]||[],s.id]}),{}),u={...t.request};return u.query.expectedResultType=e,Object.entries(r).forEach(([o,s])=>u.query.addCategoryFilter(o,s)),c(a.QuerySync,u).then(i)}}const l={"dict:facets:dataset_id":Q("dataset_id"),"dict:concepts":k,"query:blank":w,"query:biosample":y("query:biosample","OBSERVATION_CROSS_COUNT"),"query:genomic":y("query:genomic","CROSS_COUNT"),"query:consent":$("COUNT"),"query:patientCount":N,hardcoded:x};function K(e){const t=e.filter(n=>!!l[n.key]);return e.length===0?[]:t.reduce((n,r)=>{const u=[...n],o=(r==null?void 0:r.auth)===void 0?!0:r.auth,s=(r==null?void 0:r.auth)===void 0?!0:!r.auth;return o&&O()&&u.push({...r,auth:!0,result:{}}),b.login.open&&s&&u.push({...r,auth:!1,result:{}}),u},[])}function W(e){return e.map(t=>{const n=!t.auth;return{...t,result:h(n).reduce((r,{name:u,uuid:o})=>{const s={...r};return s[u]=l[t.key]({isOpenAccess:n,stat:t,request:P(n,o)}),s},{})}})}function Z(e,t){const n=t.filter(r=>!!l[r.key]);return n.length===0?[]:n.reduce((r,u)=>{const o=[...r];return o.push({...u,auth:!e,result:h(e).reduce((s,{name:f,uuid:m})=>{const d={...s};return d[f]=l[u.key]({isOpenAccess:e,stat:u,request:_(!e,m)}),d},{})}),o},[])}export{B as S,q as a,K as b,v as c,Z as g,W as p};
